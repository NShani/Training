#will run the repository (image) with the name "imageName"
* sudo docker run imageName

#wil download the image from the dockerHub (if it is not in local Repository) and run in the container
* sudo docker run docker/whalesay cowsay boo

#will show the images already exist in the local
* sudo docker images

#will build the image according to the dockerfile (after successfully built we have to run the image)
* sudo docker build -t docker-whale .
* sudo docker run docker-whale

#will create a local reopsitory with the imageName
* sudo docker tag ImageID dockerHubUserName/imageName:latest
	- sudo docker tag 53bb6f7d387c nadeeshani/my-image:latest
	// this will create a local repository(image) named nadeeshani/my-image which is a copy of the 53bb6f7d387c (ImageID)


# will logged into the dockerHub account through the terminal
* sudo docker login --username=nadeeshani --password=******* --email=username@comapany.com


# will push to the local repo(image) named nadeeshani/my-image to the dockerHUb account
* sudo docker push nadeeshani/my-image
// this will push only if there are any differences with dockerHub repository's image. (will pushed those layers which is different) 
// if there is no repository in the dockerHub then my-image will be atomatically created in the dockerHub


# will remove image using imageID or image name
* sudo docker rmi -f imageID/name

# will pull the image named my-image from the the dockerHub to the local repository
* sudo docker pull dockerHubUserName/my-image 

# will print the 'Hello world' and once finished the command(printing the Hello world) the terminator will stopped
* sudo docker run ubuntu:14.04 /bin/echo 'Hello world'


# will open a interactive container
* sudo docker run -t -i ubuntu:14.04 /bin/bash
// The -t flag assigns a terminal inside our new container and the -i flag allows us to make an interactive connection
// /bin/bash. This will launch a Bash shell inside our container 
// container will run until we exit from the bash shell


# will list the running containers
* sudo docker ps

# will list the all containers
* sudo docker ps -a

# will show the containerID  which is our command rurunnning like loop will not 
* sudo docker run -d ubuntu:14.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"
//This will run the command as a loop until we stop the container
//The -d flag tells Docker to run the container and put it in the background, to daemonize it.

# will look inside the container and returns its standard output
* sudo docker logs containerName
// Docker automatically generates names for any containers started


# assign the container into a varible
* JOB=$(sudo docker run -d ubuntu /bin/sh -c "while true; do echo Hello world; sleep 1; done")

# container stop using the assigned variable 
* sudo docker stop $JOB

# container start using the assigned variable
* sudo docker start $JOB

# container restart using the assigned variable
* sudo docker restart $JOB

# container kill using the assigned variable
* sudo docker kill $JOB

# container remove using the assigned variable
* sudo docker rm $JOB
